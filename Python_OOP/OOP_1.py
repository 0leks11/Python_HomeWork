#принципы ООП наследование, инкапсуляция, полиморфизм
    # инкапуляция - сокрытие внутренних данных класса от прямого доступа извне 
    # наследование - создание нового класса на основе существующего
    # полиморфизм - возможность использовать обьекты с одним и тем же интерфейсом без информации о типе и внутренней структуры обьекта
    # абстракция - выделение ключевых характеристик обьекта и исключение из рассотрения незначительных

# собака - класс
# Барсик - экземпляр класса
# царство Животные - родительский класс (если создан)

# Определение класса Car
class Car:
    # __init__ конструктор
    # конструктор - специальный метод, вызывается автоматчкски когда создаем обьект класса функции
    # self это ссылка на текущий обьект класса  и используется для доступа к атрибутам и методам  (в других языках "this")
    def __init__(self, color, brand, horsepower):
        self.color = color          # Атрибут класса для цвета
        self.brand = brand          # Атрибут класса для марки
        self.horsepower = horsepower# Атрибут класса для мощности двигателя
        print(self)  # <__main__.Car object at 0x00000208D326F810>
    # Метод для запуска автомобиля
    def start_engine(self):
        print(f"{self.brand} engine started with {self.horsepower} horsepower!")
    
    # Метод для изменения цвета автомобиля
    def repaint(self, new_color):
        self.color = new_color
        print(f"The car has been repainted to {self.color}.")

# Создание объекта car1, который является экземпляром класса Car
car1 = Car('red', 'Ferrari', 540)
car2 = Car('red', 'Ferrari', 540)
car3 = Car('regd', 'Ferggrari', 5450)
# Вызов метода start_engine у объекта car1
car1.start_engine()

# Изменение цвета car1
car1.repaint('blue')